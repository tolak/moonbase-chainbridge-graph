enum ProposalStatus {
    Inactive
    Active
    Passed
    Executed
    Cancelled
}

type Tx @entity {
    id: ID!
    hash: String!
    sender: String!
}

type BridgeOutboundingRecord @entity {
    id: ID!
    createdAt: BigInt!

    # destChainId and depositNonce can be used to track
    # crosschain transfer status on dest chain
    destChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    amount: BigInt
    recipient: String @index

    # The deposit transaction send by user
    sendTx: Tx
    # Sender can be used to construct user transaction history
    sender: String @index
}

type BridgeInboundingRecord @entity {
    id: ID!
    createdAt: BigInt!

    # Origin chain can use destChainId and depositNonce to track
    # crosschain transfer status on this chain
    originChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    # Proposal status being updated when vote happened
    status: ProposalStatus
    # Relayers vote transaction
    voteTxs: [Tx!]!
    # Relayer execution transaction
    executeTx: Tx
}

type ERC20Deposited @entity {
    id: ID!
    createdAt: BigInt!

    token: String! @index
    recipient: String! @index
    amount: BigInt!
}

type ERC20Withdrawn @entity {
    id: ID!
    createdAt: BigInt!

    token: String! @index
    depositer: String! @index
    amount: BigInt!
}